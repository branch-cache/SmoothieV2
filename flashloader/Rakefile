require 'rake'
require 'pathname'
#require 'fileutils'

verbose(ENV['verbose'] == '1')

PROG = 'flashloader'

# include a defaults file if present
load 'rakefile.defaults' if File.exists?('rakefile.defaults')

if ENV['target'].nil?
  TARGET = 'Nucleo'
elsif (ENV['target'] != 'Nucleo' && ENV['target'] != 'Prime'&& ENV['target'] != 'Devebox' && ENV['target'] != 'IkosyBot')
  puts "ERROR: Must specify target=[Nucleo|Prime|Devebox|IkosyBot]"
  exit 0
else
  TARGET = ENV['target']
end

puts "Target is #{TARGET}"

DEBUG = ENV['debug'] == '1'
#DEBUG = true

$using_cpp= false

def pop_path(path)
  Pathname(path).each_filename.to_a[1..-1]
end

def obj2src(fn, e)
  File.absolute_path(File.join(pop_path(File.dirname(fn)), File.basename(fn).ext(e)))
end

# Makefile .d file loader to be used with the import file loader.
# this emulates the -include $(DEPFILES) in a Makefile for the generated .d files
class DfileLoader
  include Rake::DSL

  SPACE_MARK = "\0"

  # Load the makefile dependencies in +fn+.
  def load(fn)
    return if ! File.exists?(fn)
    lines = File.read fn
    lines.gsub!(/\\ /, SPACE_MARK)
    lines.gsub!(/#[^\n]*\n/m, "")
    lines.gsub!(/\\\n/, ' ')
    lines.each_line do |line|
      process_line(line)
    end
  end

  private

  # Process one logical line of makefile data.
  def process_line(line)
    file_tasks, args = line.split(':', 2)
    return if args.nil?
    dependents = args.split.map { |d| respace(d) }
    file_tasks.scan(/\S+/) do |file_task|
      file_task = respace(file_task)
      file file_task => dependents
    end
  end

  def respace(str)
    str.tr SPACE_MARK, ' '
  end
end

# Install the handler
Rake.application.add_loader('d', DfileLoader.new)

TOOLSDIR = ENV['ARMTOOLS'].nil? ? '/usr/bin' :  ENV['ARMTOOLS']
TOOLSBIN = "#{TOOLSDIR}/arm-none-eabi-"
LIBSDIR = "#{TOOLSDIR}/../lib"
CC = "#{TOOLSBIN}gcc"
CCPP = "#{TOOLSBIN}g++"
LD = "#{TOOLSBIN}gcc"
LDCPP = "#{TOOLSBIN}c++"
OBJCOPY = "#{TOOLSBIN}objcopy"
OBJDUMP = "#{TOOLSBIN}objdump"
SIZE = "#{TOOLSBIN}size"
AR = "#{TOOLSBIN}ar"
ARFLAGS = 'ur'

current_version= `#{CC} -dumpversion`.chomp
puts "Current GCC version is #{current_version}"
#ARMVERSION = ENV['ARMVERSION'].nil? ? current_version :  ENV['ARMVERSION']

# HAL files
hal_src = FileList["Drivers/STM32H7xx_HAL_Driver/Src/*.{c,cpp,s}"]
hal_src.exclude(/_template\.c/)

# the startup file
startup_src = ["Src/startup_stm32h7xx.s"]

# application
app_src = FileList["Src/*.{c,cpp}"]

# Fat FS
fat_src = FileList["FatFs/src/*.c",
                   "FatFs/src/option/syscall.c",
                   "FatFs/src/option/unicode.c"]
fat_src.exclude(/_template\.c/)


# Library sources
HAL_SRCS = hal_src + fat_src
# App soruces
APP_SRCS = app_src + startup_src

# All sources
SRCS = HAL_SRCS + APP_SRCS

$using_cpp= SRCS.find { |i| File.extname(i) == ".cpp" }.nil? ? false : true

OBJDIR = "#{PROG}_#{TARGET}"
OBJ = APP_SRCS.collect { |fn| File.join(OBJDIR, File.dirname(fn), File.basename(fn).ext('o')) }

HAL_OBJ = HAL_SRCS.collect { |fn| File.join(OBJDIR, File.dirname(fn), File.basename(fn).ext('o')) }
OBJS = HAL_OBJ + OBJ

# list of header dependency files generated by compiler
DEPFILES = OBJS.collect { |fn| File.join(File.dirname(fn), File.basename(fn).ext('d')) }

# create destination directories
SRCS.each do |s|
  d= File.join(OBJDIR, File.dirname(s))
  FileUtils.mkdir_p(d) unless Dir.exists?(d)
end

include_dirs = [Dir.glob(["**/Inc", "**/Include", "**/include", "**/inc"])].flatten
include_dirs << 'FatFs/src'
include_dirs << 'Src'

sys_include_dirs = []

# [Dir.glob([PROG + '/**/Inc/**', './mri/**/'])].flatten

INCLUDE = (include_dirs).collect { |d| "-I#{d}" }.join(" ")

defines = %w(-DUSE_HAL_DRIVER -DCORE_CM7 -DUSE_FULL_LL_DRIVER)
if DEBUG
  defines << "-DDEBUG"
end

# Target specified #defines
defines << "-DBUILD_TARGET=\\\"#{TARGET}\\\" "
if TARGET == 'Nucleo'
  defines << '-DUSE_UART3'
  defines << '-DUART3_PINSET=8'
  defines << '-DBOARD_NUCLEO'
  defines << '-DSTM32H753xx'
  defines << '-DHSE_VALUE=8000000'
elsif TARGET == 'Prime'
  defines << '-DUSE_UART2'
  defines << "-DUART2_PINSET=6"
  defines << '-DBOARD_PRIME'
  defines << '-DSTM32H745xx'
  defines << '-DHSE_VALUE=25000000'
elsif TARGET == 'Devebox'
  defines << '-DUSE_UART4'
  defines << '-DUART4_PINSET=8'
  defines << '-DBOARD_DEVEBOX'
  defines << '-DSTM32H743xx'
  defines << '-DHSE_VALUE=25000000'
elsif TARGET == 'IkosyBot'
	defines << '-DUSE_UART2'
	defines << '-DUART2_PINSET=6'
	defines << '-DBOARD_IKOSYBOT'
	defines << '-DSTM32H753xx'
	defines << '-DHSE_VALUE=25000000'
else
  raise("Error unhandled target")
end

DEFINES= defines.join(' ')

DEPFLAGS = '-MMD '
CSTD = ' -std=gnu11 '
FFLAGS = ' -ffunction-sections -fstack-usage '
CPUFLGS = '-mcpu=cortex-m7 -mfpu=fpv5-d16 -mfloat-abi=hard -mthumb '
SPECS = ' --specs=nano.specs '
CFLAGS = CSTD + FFLAGS + CPUFLGS + DEPFLAGS + " -Wall  " + (DEBUG ? "-O0 -g3 " : "-O2 -g") +  SPECS
CPPFLAGS = CFLAGS + ' -Wno-psabi -fno-exceptions -fno-rtti -fno-common -std=gnu++14'

# Linker script to be used.
LSCRIPT = 'STM32H7xx_RAM.ld'

LOPTIONS = ['-mcpu=cortex-m7', "-Wl,-Map=#{OBJDIR}/#{PROG}.map", "-Wl,--gc-sections", "-static", SPECS, '-mfpu=fpv5-d16', '-mfloat-abi=hard', '-mthumb', '-Wl,--start-group', '-lc', '-lm', '-Wl,--end-group']
LDFLAGS = "-Wl,-print-memory-usage -Wl,--cref -T#{LSCRIPT} " + LOPTIONS.join(" ")

# generate the header dependencies if they exist
import(*DEPFILES)

# tasks
# desc "Upload via stlink"
# task :upload do
#   sh "./flashit #{OBJDIR}/#{PROG}.bin"
# end

desc 'clean build'
task :clean do
  FileUtils.rm_rf(OBJDIR)
end

desc 'default is to build'
task :default => [:build] #, :size]

desc 'default is to build'
task :build => ["#{OBJDIR}/#{PROG}.bin"]

desc 'get size of build'
task :size do
  sh "#{SIZE} #{OBJDIR}/#{PROG}.elf"
end

desc 'get list of build'
task :list do
  sh "#{OBJDUMP} -h -S #{OBJDIR}/#{PROG}.elf > #{OBJDIR}/#{PROG}.list"
end

desc 'get disasm of build'
task :disasm do
  sh "#{OBJDUMP} -d -f -M reg-names-std --demangle #{OBJDIR}/#{PROG}.elf > #{OBJDIR}/#{PROG}.disasm"
end

file "#{OBJDIR}/#{PROG}.bin" => ["#{OBJDIR}/#{PROG}.elf"] do |t|
  puts "Creating #{t.name}"
  sh "#{OBJCOPY} -O binary #{OBJDIR}/#{PROG}.elf #{OBJDIR}/#{PROG}.bin"
end

file "#{OBJDIR}/#{PROG}.elf" => ["#{OBJDIR}/libhal.a"] + OBJ do |t|
  puts "Linking #{t.name}"
  sh "#{LD} #{OBJ} -L#{OBJDIR} -lhal #{LDFLAGS} -o #{t.name}"
end

file "#{OBJDIR}/libhal.a" => HAL_OBJ do |t|
  puts "Creating #{t.name}"
  sh "#{AR} #{ARFLAGS} #{t.name} #{HAL_OBJ}"
end

#arm-none-eabi-objcopy -R .stack -O ihex ../LPC1768/main.elf ../LPC1768/main.hex
#arm-none-eabi-objdump -d -f -M reg-names-std --demangle ../LPC1768/main.elf >../LPC1768/main.disasm

rule '.o' => lambda{ |objfile| obj2src(objfile, 'cpp') } do |t|
  puts "Compiling #{t.source}"
  sh "#{CCPP} #{CPPFLAGS} #{INCLUDE} #{DEFINES} #{$version} -c -o #{t.name} #{t.source}"
end

rule '.o' => lambda{ |objfile| obj2src(objfile, 'c') } do |t|
  puts "Compiling #{t.source}"
  sh "#{CC} #{CFLAGS} #{CSTD} #{INCLUDE} #{DEFINES} #{$version} -c -o #{t.name} #{t.source}"
end

rule '.o' => lambda{ |objfile| obj2src(objfile, 's') } do |t|
  puts "Assembling #{t.source}"
  sh "#{CC} -c #{SPECS} -mthumb -mcpu=cortex-m7 -mthumb-interwork -mlittle-endian -mfloat-abi=hard -mfpu=fpv5-sp-d16 -g -Wa,--no-warn -x assembler-with-cpp #{INCLUDE} -o #{t.name} #{t.source}"
end
