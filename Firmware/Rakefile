require 'rake'
require 'pathname'
#require 'fileutils'
require 'digest'

verbose(ENV['verbose'] == '1')
TESTING = ENV['testing'].nil? ? false : ENV['testing'] == '1'

PROG = 'smoothiev2'

# include a defaults file if present
load 'rakefile.defaults' if File.exists?('rakefile.defaults')

if ENV['target'].nil?
  TARGET = 'Prime'
  #TARGET = 'Nucleo'
  #TARGET = 'Devebox'
elsif (ENV['target'] != 'Nucleo' && ENV['target'] != 'Prime'&& ENV['target'] != 'Devebox')
  puts "ERROR: Must specify target=[Nucleo|Prime|Devebox]"
  exit 0
else
  TARGET = ENV['target']
end

target_defines= []
# configure main DEBUG UART port to use
if TARGET == 'Prime'
  target_defines << '-DUSE_UART2'
  target_defines << "-DUART2_PINSET=6"
elsif TARGET == 'Nucleo'
  target_defines << '-DUSE_UART3'
  target_defines << '-DUART3_PINSET=9'
elsif TARGET == 'Devebox'
  target_defines << '-DUSE_UART4'
  target_defines << '-DUART4_PINSET=8'
  ENV['nonetwork'] = '1'
end

puts "Target is #{TARGET}"

DEBUG = ENV['debug'] == '1'
DEBUGLIB = ENV['debuglib'] == '1'

$using_cpp= false

def pop_path(path)
  Pathname(path).each_filename.to_a[1..-1]
end

def obj2src(fn, e)
  File.absolute_path(File.join(pop_path(File.dirname(fn)), File.basename(fn).ext(e)))
end

# Makefile .d file loader to be used with the import file loader.
# this emulates the -include $(DEPFILES) in a Makefile for the generated .d files
class DfileLoader
  include Rake::DSL

  SPACE_MARK = "\0"

  # Load the makefile dependencies in +fn+.
  def load(fn)
    return if ! File.exists?(fn)
    lines = File.read fn
    lines.gsub!(/\\ /, SPACE_MARK)
    lines.gsub!(/#[^\n]*\n/m, "")
    lines.gsub!(/\\\n/, ' ')
    lines.each_line do |line|
      process_line(line)
    end
  end

  private

  # Process one logical line of makefile data.
  def process_line(line)
    file_tasks, args = line.split(':', 2)
    return if args.nil?
    dependents = args.split.map { |d| respace(d) }
    file_tasks.scan(/\S+/) do |file_task|
      file_task = respace(file_task)
      file file_task => dependents
    end
  end

  def respace(str)
    str.tr SPACE_MARK, ' '
  end
end

# Install the handler
Rake.application.add_loader('d', DfileLoader.new)

TOOLSDIR = ENV['ARMTOOLS'].nil? ? '/usr/bin' :  ENV['ARMTOOLS']
TOOLSBIN = "#{TOOLSDIR}/arm-none-eabi-"
LIBSDIR = "#{TOOLSDIR}/../lib"
CC = "#{TOOLSBIN}gcc"
CCPP = "#{TOOLSBIN}g++"
LD = "#{TOOLSBIN}ld"
LDCPP = "#{TOOLSBIN}c++"
OBJCOPY = "#{TOOLSBIN}objcopy"
OBJDUMP = "#{TOOLSBIN}objdump"
SIZE = "#{TOOLSBIN}size"
AR = "#{TOOLSBIN}ar"
ARFLAGS = 'ur'

current_version= `#{CC} -dumpversion`.chomp
puts "Current GCC version is #{current_version}"
#ARMVERSION = ENV['ARMVERSION'].nil? ? current_version :  ENV['ARMVERSION']

# Set build type
#BUILDTYPE= ENV['BUILDTYPE'] || 'Checked' unless defined? BUILDTYPE
#puts "#{BUILDTYPE} build"
NONETWORK = ENV['nonetwork'].nil? ? 0 : ENV['nonetwork']

# add HAL files
#hal_src = FileList['Hal/**/*.{c,cpp,s}']
hal_src = FileList['Hal/STM32H7xx_HAL_Driver/**/*.{c,cpp,s}', 'Hal/src/*.{c,cpp,s}']
hal_src.exclude(/_template\.c/)
hal_src.exclude("Hal/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_eth.c")

# Network
if NONETWORK == '1'
  network_src = []
else
  network_src = FileList[
                  "Hal/network/*.c",
                  "Hal/network/src/*.{c,cpp}",
                  "Hal/network/portable/NetworkInterface/*.c",
                  "Hal/network/portable/BufferManagement/BufferAllocation_1.c",
                  "Hal/network/portable/NetworkInterface/Common/*.c",
                  "Hal/network/services/*.c",
                ]
end

# SD support and fatfs
sdmmc_src = FileList['Hal/sdmmc/**/*.c']

# USB support
usb_src = FileList[
                'Hal/usb/*.c',
                'Hal/usb/USBDevice/Device/*.c',
                'Hal/usb/USBDevice/Class/DFU/*.c',
                'Hal/usb/USBDevice/Class/CDC/usbd_cdc.c',
                'Hal/usb/USBDevice/Class/MSC/*.c',
                'Hal/usb/XPD_USB/*.c'
          ]

# RTOS
rtos_src = FileList['RTOS/**/*.{c,cpp,s}']

if TESTING
  # Unity tests
  src = FileList['Unity/src/*.c', 'src/**/*.{c,cpp,s}']
  src.exclude(/(src\/main.cpp)/) # we don't want the Firmware main.cpp
  src.exclude(/(src\/Consoles.cpp)/) # or this
  src.exclude(/(src\/modules)/) # TODO these are not needed yet

  if ENV['test'].nil?
    # all tests
    src += FileList['TestUnits/TEST_*.cpp']
    src.exclude("TestUnits/TEST_diskio.cpp") # we do not want to do this as it wipes out the sdcard
    src.exclude("TestUnits/TEST_temperatureswitch.cpp") # as it requires dependencies
    if ENV['exclude']
      ENV['exclude'].split(',').map { |i| "TestUnits/TEST_#{i}.cpp" }.each do |e|
        src.exclude(e)
      end
    end
    puts "Building All Test Cases debug: #{DEBUG}"

  else
    # just named tests
    tests= ENV['test'].split(',')
    tests.each do |t|
      src += FileList["TestUnits/TEST_#{t}.cpp"]
    end
    # specify modules to include in build (as tools/temperatureswitch,utils/killbutton)
    unless ENV['modules'].nil?
      modules= ENV['modules'].split(',')
      modules.each do |t|
        src += FileList["src/modules/#{t}/*.{c,cpp}"]
      end
    end
    puts "Building Test Cases #{tests}, debug: #{DEBUG}"
  end
  src += FileList['TestUnits/main.cpp']

else
  src = FileList['src/**/*.{c,cpp,s}'] #, 'staging/**/*.cpp' ]
  #src.exclude(/xxxx/) # TODO these are not ready yet
  puts "Building Firmware debug: #{DEBUG}"
end

if NONETWORK == '1'
  src.exclude(/\/utils\/network\//)
  puts "Excluding Network code"
end

# Library sources
HAL_SRCS = hal_src + sdmmc_src + rtos_src + usb_src + network_src

# All sources
SRCS = HAL_SRCS + src

$using_cpp= SRCS.find { |i| File.extname(i) == ".cpp" }.nil? ? false : true

OBJDIR = "#{PROG}_#{TARGET}"
OBJ = src.collect { |fn| File.join(OBJDIR, File.dirname(fn), File.basename(fn).ext('o')) }
HAL_OBJ = HAL_SRCS.collect { |fn| File.join(OBJDIR, File.dirname(fn), File.basename(fn).ext('o')) }
OBJS = HAL_OBJ + OBJ

# list of header dependency files generated by compiler
DEPFILES = OBJS.collect { |fn| File.join(File.dirname(fn), File.basename(fn).ext('d')) }

# create destination directories
SRCS.each do |s|
  d= File.join(OBJDIR, File.dirname(s))
  FileUtils.mkdir_p(d) unless Dir.exists?(d)
end

include_dirs = ['Hal/network/portable/NetworkInterface', # Must be first ahead of Hal/STM32H7xx_HAL_Driver
                "Hal/network/portable/Compiler/GCC",
                "Hal/network/src",
                "Hal/network/services"] +
    [Dir.glob(["**/Inc", "**/Include", "**/include", "**/inc"])].flatten +
    [Dir.glob(['./src/**/'])].flatten +
    ['Hal/STM32H7xx_HAL_Driver', 'Hal/STM32H7xx_HAL_Driver/cmsis', 'Hal/src',
     'Hal/sdmmc/fatfs', 'Hal/sdmmc/src',
     'Hal/usb', 'Hal/usb/XPD_USB', 'Hal/usb/USBDevice/PDs/STM32_XPD'
    ]

INCLUDE = (include_dirs).collect { |d| "-I#{d}" }.join(" ")

defines = %w(-DUSE_HAL_DRIVER -DCORE_CM7)
defines << "-DUSE_FULL_LL_DRIVER"
#defines << "-D_REENT_SMALL"
if NONETWORK == '1'
  defines << "-DNONETWORK"
end
if DEBUG
  defines << "-DDEBUG"
  defines << "-DUSE_FULL_ASSERT"
end

# Target specified #defines
defines << "-DBUILD_TARGET=\\\"#{TARGET}\\\" "
if TARGET == 'Nucleo'
  defines << '-DBOARD_NUCLEO'
  defines << '-DSTM32H745xx'
  defines << '-DHSE_VALUE=8000000'
  defines << '-DNO_SD_DET'
elsif TARGET == 'Prime'
  defines << '-DBOARD_PRIME'
  defines << '-DSTM32H745xx'
  defines << '-DHSE_VALUE=25000000'
  defines << '-DDRIVER_TMC'
  defines << '-DNO_SD_DET'
elsif TARGET == 'Devebox'
  defines << '-DBOARD_DEVEBOX'
  defines << '-DSTM32H743xx'
  defines << '-DHSE_VALUE=25000000'
  defines << '-DDRIVER_TMC'
  defines << '-DNO_SD_DET'
  defines << '-DN_PRIMARY_AXIS=4'
else
  raise("Error unhandled target")
end

# define the maximum number of axis compiled in
unless ENV['axis'].nil?
  defines << "-DMAX_ROBOT_ACTUATORS=#{ENV['axis']}"
end

# define the number of primary (cartesian) axis must be >= MAX_ROBOT_ACTUATORS
unless ENV['paxis'].nil?
  defines << "-DN_PRIMARY_AXIS=#{ENV['paxis']}"
end

defines += target_defines

DEFINES= defines.join(' ')

DEPFLAGS = '-MMD '
CSTD = '-std=gnu11'
FFLAGS = ' -fmessage-length=0 -fno-builtin-printf -ffunction-sections -fdata-sections '
CFLAGS = FFLAGS + DEPFLAGS + " -Wall -Wshadow -Wundef  -mcpu=cortex-m7 -mthumb -mfloat-abi=hard -mfpu=fpv5-d16  " + (DEBUG ? "-O0 -g3 " : "-O2 -g")
CPPFLAGS = CFLAGS + ' -Wno-psabi  -fno-rtti -fno-common -std=gnu++14 -fno-exceptions '

# Linker script to be used.
LSCRIPT = "STM32H745_FLASH.ld"

LOPTIONS = ['-Wl,--gc-sections', '-Wl,-print-memory-usage',
            '-Wl,--wrap=malloc', '-Wl,--wrap=_malloc_r',
            '-Wl,--wrap=printf', '-Wl,--wrap=snprintf', '-Wl,--wrap=vsnprintf',
            '-Wl,--wrap=sprintf', '-Wl,--wrap=vsprintf', '-Wl,--wrap=vprintf',
            '-Wl,--wrap=dprintf', '-Wl,--wrap=vdprintf',
            '-Wl,--wrap=fprintf', '-Wl,--wrap=vfprintf',
            '-Wl,--undefined=HAL_InitTick',
            '-mcpu=cortex-m7', '-mfpu=fpv5-d16', '-mfloat-abi=hard', '-mthumb', '-fno-exceptions',
            '-Wl,--wrap=__aeabi_unwind_cpp_pr0','-Wl,--wrap=__aeabi_unwind_cpp_pr1','-Wl,--wrap=__aeabi_unwind_cpp_pr2']

LDFLAGS = " -Wl,--cref -Wl,-Map=#{OBJDIR}/#{PROG}.map -T#{LSCRIPT} " + LOPTIONS.join(" ")

# generate the header dependencies if they exist
import(*DEPFILES)

desc "List options"
task :help do
  puts "options:"
  puts " verbose=1 - turns on verbose output"
  puts " testing=1 - compiles unit tests"
  puts " test=test1[,test2,test3] - specifies which test(s) to build"
  puts " exclude=test1[,test2...] - excludes the named test(s) from the build"
  puts " target=[Nucleo|Prime] - sets target board. default is #{TARGET}"
  puts " debug=1 - turns on debug compilation"
  puts " debuglib=1 - turns on debugging only for the hal libs"
  puts " ARMTOOLS=path - overides where the ARM tool chain is loaded from. default is #{TOOLSDIR}"
  #puts " ARMVERSION=version - overides the version of ARM tools to use. default is #{ARMVERSION}"
  puts " axis=nnn - overrides the number of axis compiled in. default is 4"
  puts " paxis=nnn - overrides the number of primary axis. default is 3"
end

desc "flash via dfu-util"
task :flash do
  if TARGET == 'Nucleo'
    # using stlinkV3
    sh "STM32_Programmer_CLI -q -c port=SWD -w #{OBJDIR}/#{PROG}.bin 0x08000000 -rst"
  else
    # using dfu-util, which must be enabled in config.ini and dfu flasher flashed to qspi
    sh "dfu-util -D #{OBJDIR}/#{PROG}.bin"
  end
end

desc "Download to sdcard"
task :download do
  # download over ymodem suitable for ftdi serial
  #sh "../tools/upload-ym.py #{OBJDIR}/#{PROG}.bin USB0"
  # download using the dl command suitabkle for ACM USB serial
  sh "../tools/download-dl.py #{OBJDIR}/#{PROG}.bin ACM0"
end

desc 'clean build'
task :clean do
  FileUtils.rm_rf(OBJDIR)
end

desc 'only clean src and tests'
task :cleansrc do
  FileUtils.rm_rf("#{OBJDIR}/src")
  FileUtils.rm_rf("#{OBJDIR}/TestUnits")
end

desc 'only clean tests'
task :cleantests do
  FileUtils.rm_rf("#{OBJDIR}/TestUnits")
end

desc 'default is to build'
task :default => [:build] #, :size]

desc 'default is to build'
task :build => ["#{OBJDIR}/#{PROG}.bin"]

desc 'get size of build'
task :size do
  sh "#{SIZE} #{OBJDIR}/#{PROG}.elf"
end

desc 'get disasm of build'
task :disasm do
  sh "#{OBJDUMP} --disassemble -f -M reg-names-std --demangle #{OBJDIR}/#{PROG}.elf > #{OBJDIR}/#{PROG}.disasm"
end

desc 'get list of build'
task :list do
  sh "#{OBJDUMP} -h -S #{OBJDIR}/#{PROG}.elf > #{OBJDIR}/#{PROG}.list"
end

task :version do
  v1= `git symbolic-ref HEAD`
  v2= `git log --pretty=format:%h -1`
  if v1.nil? or v1.empty?
    v= "???"
  else
    v= v1[11..-1].chomp
  end
  $version = ' -D__GITVERSIONSTRING__=\"' + "#{v}-#{v2}".chomp + '\"'
end

# make sure the flashloader has been built
file "../flashloader/flashloader_#{TARGET}/flashloader.bin" do |t|
  puts "Running rake on flashloader"
  sh "cd ../flashloader; rake target=#{TARGET} -m"
end

# copy the flashloader bin to our OBJDIR
file "#{OBJDIR}/flashloader.bin" => ["../flashloader/flashloader_#{TARGET}/flashloader.bin"] do |t|
  puts "Copying #{t.source} to #{t.name}"
  FileUtils.cp(t.source, t.name)
end

# create a flash loader .o from the binary so we can include it in our firmware binary
file "#{OBJDIR}/flashloader.o" => ["#{OBJDIR}/flashloader.bin"] do |t|
  puts "converting flash loader #{t.source} -> #{t.name}"
  sh "#{OBJCOPY} -I binary -O elf32-littlearm -B arm --rename-section .data=.flashloader_data #{t.source} #{t.name}"
  ["start", "end", "size"].each do |n|
    sh "#{OBJCOPY} --redefine-sym _binary_smoothiev2_#{TARGET}_flashloader_bin_#{n}=_binary_flashloader_bin_#{n} #{t.name}"
  end
end

file "#{OBJDIR}/#{PROG}.dfu" => ["#{OBJDIR}/#{PROG}.bin"] do |t|
  puts "Creating #{t.name}"
  sh "python3 ../tools/dfu.py -b 0x8000000:#{OBJDIR}/#{PROG}.bin #{OBJDIR}/#{PROG}.dfu"
end

file "#{OBJDIR}/#{PROG}.bin" => ["#{OBJDIR}/#{PROG}.elf"] do |t|
  puts "Creating #{t.name}"
  sh "#{OBJCOPY} -O binary #{OBJDIR}/#{PROG}.elf #{OBJDIR}/#{PROG}.bin"
  # get MD5 of the binary
  md5 = Digest::MD5.file "#{OBJDIR}/#{PROG}.bin"
  m = md5.hexdigest
  # create MD5 file
  open("#{OBJDIR}/#{PROG}.md5", 'w') { |f| f << m }
  # append the md5sum to the binary
  open("#{OBJDIR}/#{PROG}.bin", 'a') { |f| f << m }
end

file "#{OBJDIR}/#{PROG}.elf" => ["#{OBJDIR}/libhal.a", "#{OBJDIR}/flashloader.o"] + OBJ do |t|
  puts "Linking #{t.name} to Internal FLASH"
  sh "#{$using_cpp ? LDCPP : LD} #{OBJ} -L#{OBJDIR} -lhal #{LDFLAGS} #{OBJDIR}/flashloader.o -o #{t.name}"
end

file "#{OBJDIR}/libhal.a" => HAL_OBJ do |t|
  puts "Creating #{t.name}"
  sh "#{AR} #{ARFLAGS} #{t.name} #{HAL_OBJ}"
end

# special case to always build the version
file "#{OBJDIR}/src/version.o" => [:version, 'src/version.cpp'] do |t|
  puts "Compiling src/version.cpp"
  sh "#{CCPP} #{CPPFLAGS} #{INCLUDE} #{DEFINES} #{$version} -c -o #{t.name} src/version.cpp"
end

rule '.o' => lambda{ |objfile| obj2src(objfile, 'cpp') } do |t|
  puts "Compiling #{t.source}"
  sh "#{CCPP} #{CPPFLAGS} #{INCLUDE} #{DEFINES} #{$version} -c -o #{t.name} #{t.source}"
end

rule '.o' => lambda{ |objfile| obj2src(objfile, 'c') } do |t|
  puts "Compiling #{t.source}"
  sh "#{CC} #{CFLAGS} #{CSTD} #{INCLUDE} #{DEFINES} #{$version} -c -o #{t.name} #{t.source}"
end

rule '.o' => lambda{ |objfile| obj2src(objfile, 's') } do |t|
  puts "Assembling #{t.source}"
  sh "#{CC} -c -mthumb -mcpu=cortex-m4 -mthumb-interwork -mlittle-endian -mfloat-abi=hard -mfpu=fpv5-sp-d16 -g -Wa,--no-warn -x assembler-with-cpp #{INCLUDE} -o #{t.name} #{t.source}"
end
